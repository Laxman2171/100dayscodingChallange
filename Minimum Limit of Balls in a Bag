import java.util.Arrays;

class Solution {

    public boolean ispossible(int[] nums, int maxOps, int mid) {
        int totalOps = 0;
        for (int num : nums) {
            int ops = num / mid;
            if (num % mid == 0) {
                ops -= 1; // Reduce one operation for exact divisions
            }
            totalOps += ops;
        }
        return totalOps <= maxOps;
    }

    public int minimumSize(int[] nums, int maxOperations) {
        int l = 1;
        int r = Arrays.stream(nums).max().getAsInt(); // Maximum number of balls in any bag
        int result = r;

        while (l <= r) {
            int mid = l + (r - l) / 2; // Correct midpoint calculation
            
            if (ispossible(nums, maxOperations, mid)) {
                result = mid; // Update the result to a smaller penalty
                r = mid - 1; // Search for an even smaller penalty
            } else {
                l = mid + 1; // Increase the penalty
            }
        }
        return result;
    }
}
