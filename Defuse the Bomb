import java.util.*;

class Solution {
    public int[] decrypt(int[] code, int k) {
        int n = code.length;
        int[] result = new int[n];

        // If k is 0, return an array filled with 0
        if (k == 0) {
            return result;
        }

        int sum = 0;

        // Calculate the initial window sum
        if (k > 0) {
            for (int i = 1; i <= k; i++) {
                sum += code[i % n];
            }
        } else {
            for (int i = n + k; i < n; i++) {
                sum += code[(i + n) % n]; // Adding (i + n) % n to handle negative indices
            }
        }

        // Calculate the result for each element
        for (int i = 0; i < n; i++) {
            result[i] = sum;

            if (k > 0) {
                // Move the window to the right when k is positive
                sum -= code[(i + 1) % n];
                sum += code[(i + k + 1) % n];
            } else {
                // Move the window to the left when k is negative
                sum -= code[(n + i + k) % n]; // Handling negative index with (n + i + k) % n
                sum += code[i];
            }
        }

        return result;
    }
}
